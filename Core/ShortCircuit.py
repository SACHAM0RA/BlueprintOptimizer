from Core.OptimizerCore import *

########################################
############### GLOBALS ################
########################################

BASE_DISTANCE_X = 300
BASE_DISTANCE_Y = 100

BRANCH_TEMPLATE = \
    '''Begin Object Class=/Script/BlueprintGraph.K2Node_IfThenElse Name="{NODE_NAME}" ExportPath=/Script/BlueprintGraph.K2Node_IfThenElse'"/Game/SomeProject/Logic/EntitySystem/EntityTypes/Structures/SomeBlueprint.SomeBlueprint:SomeFunction.{NODE_NAME}"'
   NodePosX={POS_X}
   NodePosY={POS_Y}
   NodeGuid={NODE_ID}
   CustomProperties Pin (PinId={EXEC_PIN_ID},PinName="execute",PinType.PinCategory="exec",PinType.PinSubCategory="",PinType.PinSubCategoryObject=None,PinType.PinSubCategoryMemberReference=(),PinType.PinValueType=(),PinType.ContainerType=None,PinType.bIsReference=False,PinType.bIsConst=False,PinType.bIsWeakPointer=False,PinType.bIsUObjectWrapper=False,PinType.bSerializeAsSinglePrecisionFloat=False,LinkedTo=({EXEC_LINK}),PersistentGuid=00000000000000000000000000000000,bHidden=False,bNotConnectable=False,bDefaultValueIsReadOnly=False,bDefaultValueIsIgnored=False,bAdvancedView=False,bOrphanedPin=False,)
   CustomProperties Pin (PinId={COND_PIN_ID},PinName="Condition",PinType.PinCategory="bool",PinType.PinSubCategory="",PinType.PinSubCategoryObject=None,PinType.PinSubCategoryMemberReference=(),PinType.PinValueType=(),PinType.ContainerType=None,PinType.bIsReference=False,PinType.bIsConst=False,PinType.bIsWeakPointer=False,PinType.bIsUObjectWrapper=False,PinType.bSerializeAsSinglePrecisionFloat=False,DefaultValue="true",AutogeneratedDefaultValue="true",LinkedTo=({COND_LINK}),PersistentGuid=00000000000000000000000000000000,bHidden=False,bNotConnectable=False,bDefaultValueIsReadOnly=False,bDefaultValueIsIgnored=False,bAdvancedView=False,bOrphanedPin=False,)
   CustomProperties Pin (PinId={THEN_PIN_ID},PinName="then",PinFriendlyName=NSLOCTEXT("K2Node", "true", "true"),Direction="EGPD_Output",PinType.PinCategory="exec",PinType.PinSubCategory="",PinType.PinSubCategoryObject=None,PinType.PinSubCategoryMemberReference=(),PinType.PinValueType=(),PinType.ContainerType=None,PinType.bIsReference=False,PinType.bIsConst=False,PinType.bIsWeakPointer=False,PinType.bIsUObjectWrapper=False,PinType.bSerializeAsSinglePrecisionFloat=False,LinkedTo=({THEN_LINK}),PersistentGuid=00000000000000000000000000000000,bHidden=False,bNotConnectable=False,bDefaultValueIsReadOnly=False,bDefaultValueIsIgnored=False,bAdvancedView=False,bOrphanedPin=False,)
   CustomProperties Pin (PinId={ELSE_PIN_ID},PinName="else",PinFriendlyName=NSLOCTEXT("K2Node", "false", "false"),Direction="EGPD_Output",PinType.PinCategory="exec",PinType.PinSubCategory="",PinType.PinSubCategoryObject=None,PinType.PinSubCategoryMemberReference=(),PinType.PinValueType=(),PinType.ContainerType=None,PinType.bIsReference=False,PinType.bIsConst=False,PinType.bIsWeakPointer=False,PinType.bIsUObjectWrapper=False,PinType.bSerializeAsSinglePrecisionFloat=False,LinkedTo=({ELSE_LINK}),PersistentGuid=00000000000000000000000000000000,bHidden=False,bNotConnectable=False,bDefaultValueIsReadOnly=False,bDefaultValueIsIgnored=False,bAdvancedView=False,bOrphanedPin=False,)
End Object'''


########################################
############### CLASSES ################
########################################

class BranchFactory(object):
    def __init__(self):
        self.nodeName: str = ""
        self.nodeID: str = ""
        self.execPinID: str = ""
        self.condPinID: str = ""
        self.thenPinID: str = ""
        self.elsePinID: str = ""
        self.execLinkData: str = ""
        self.condLinkData: str = ""
        self.thenLinkData: str = ""
        self.elseLinkData: str = ""
        self.pos = [0, 0]

    def generateContent(self) -> str:
        bp_content = BRANCH_TEMPLATE

        bp_content = bp_content.replace("{NODE_NAME}", self.nodeName)
        bp_content = bp_content.replace("{NODE_ID}", self.nodeID)

        bp_content = bp_content.replace("{EXEC_PIN_ID}", self.execPinID)
        bp_content = bp_content.replace("{COND_PIN_ID}", self.condPinID)
        bp_content = bp_content.replace("{THEN_PIN_ID}", self.thenPinID)
        bp_content = bp_content.replace("{ELSE_PIN_ID}", self.elsePinID)

        bp_content = bp_content.replace("{EXEC_LINK}", self.execLinkData)
        bp_content = bp_content.replace("{COND_LINK}", self.condLinkData)
        bp_content = bp_content.replace("{THEN_LINK}", self.thenLinkData)
        bp_content = bp_content.replace("{ELSE_LINK}", self.elseLinkData)

        bp_content = bp_content.replace("{POS_X}", str(self.pos[0]))
        bp_content = bp_content.replace("{POS_Y}", str(self.pos[1]))
        return bp_content


########################################
############### FUNCTIONS ##############
########################################


def expandBranchForAnd(branch: ObjectElement, allElements: List[ObjectElement]) -> List[ObjectElement]:
    factories: List[BranchFactory] = []
    logicOp: ObjectElement = branch.conditionElement[0]
    connection_counter = 0
    baseLocation = [0, 0]
    for connection in logicOp.connectionsByData:
        if connection[0].type != ElementType.BRANCH:
            f = BranchFactory()
            f.nodeName = str(branch) + "_" + str(connection_counter)
            f.nodeID = getPinCounter()
            f.execPinID = getPinCounter()
            f.condPinID = getPinCounter()
            f.thenPinID = getPinCounter()
            f.elsePinID = getPinCounter()

            if connection_counter == 0:
                f.execLinkData = branch.execPin.linkSection
                baseLocation = branch.getLocation()
                f.pos = baseLocation
            else:
                f.execLinkData = factories[-1].nodeName + " " + factories[-1].thenPinID
                baseLocation = baseLocation[0] + BASE_DISTANCE_X, baseLocation[1] - BASE_DISTANCE_Y
                f.pos = baseLocation

            if connection_counter > 0:
                factories[-1].thenLinkData = f.nodeName + " " + f.execPinID

            f.condLinkData = connection[1].linkSection
            f.elseLinkData = branch.elsePin.linkSection

            oldLink = str(logicOp) + " " + connection[1].id
            newLink = f.nodeName + " " + f.condPinID
            connection[0].content = connection[0].content.replace(oldLink, newLink)
            connection[0].moveToAndPropagate(f.pos[0], f.pos[1] + 100)

            factories.append(f)
            connection_counter += 1

    factories[-1].thenLinkData = branch.thenPin.linkSection

    expansion: List[ObjectElement] = []
    for f in factories:
        new_content = f.generateContent()
        expansion.append(ObjectElement(stringData=new_content))

    if len(expansion) > 0:
        allElements.remove(branch)
        allElements.remove(branch.conditionElement[0])
        allElements.extend(expansion)
        syncConnections(allElements)

        targetThenLocation = factories[-1].pos[0] + BASE_DISTANCE_X, factories[-1].pos[1] - BASE_DISTANCE_Y
        branch.thenPin.getSink().moveToAndPropagate(targetThenLocation[0], targetThenLocation[1])

        targetElseLocation = factories[-1].pos[0] + BASE_DISTANCE_X, factories[0].pos[1] + BASE_DISTANCE_Y * (
                connection_counter + 1)
        branch.elsePin.getSink().moveToAndPropagate(targetElseLocation[0], targetElseLocation[1])

    return expansion


def expandBranchForOr(branch: ObjectElement, allElements: List[ObjectElement]) -> List[ObjectElement]:
    factories: List[BranchFactory] = []
    logicOp: ObjectElement = branch.conditionElement[0]
    connection_counter = 0
    baseLocation = [0, 0]
    for connection in logicOp.connectionsByData:
        if connection[0].type != ElementType.BRANCH:
            f = BranchFactory()
            f.nodeName = str(branch) + "_" + str(connection_counter)
            f.nodeID = getPinCounter()
            f.execPinID = getPinCounter()
            f.condPinID = getPinCounter()
            f.thenPinID = getPinCounter()
            f.elsePinID = getPinCounter()

            if connection_counter == 0:
                f.execLinkData = branch.execPin.linkSection
                baseLocation = branch.getLocation()
                f.pos = baseLocation
            else:
                f.execLinkData = factories[-1].nodeName + " " + factories[-1].elsePinID
                baseLocation = baseLocation[0] + BASE_DISTANCE_X, baseLocation[1] + BASE_DISTANCE_Y
                f.pos = baseLocation

            if connection_counter > 0:
                factories[-1].elseLinkData = f.nodeName + " " + f.execPinID

            f.condLinkData = connection[1].linkSection
            f.thenLinkData = branch.thenPin.linkSection

            oldLink = str(logicOp) + " " + connection[1].id
            newLink = f.nodeName + " " + f.condPinID
            connection[0].content = connection[0].content.replace(oldLink, newLink)
            connection[0].moveToAndPropagate(f.pos[0], f.pos[1] + 100)

            factories.append(f)
            connection_counter += 1

    factories[-1].elseLinkData = branch.elsePin.linkSection

    expansion: List[ObjectElement] = []
    for f in factories:
        new_content = f.generateContent()
        expansion.append(ObjectElement(stringData=new_content))

    if len(expansion) > 0:
        allElements.remove(branch)
        allElements.remove(branch.conditionElement[0])
        allElements.extend(expansion)
        syncConnections(allElements)

        targetThenLocation = factories[-1].pos[0] + BASE_DISTANCE_X, factories[0].pos[1] - BASE_DISTANCE_Y * (
                connection_counter + 1)
        branch.thenPin.getSink().moveToAndPropagate(targetThenLocation[0], targetThenLocation[1])

        targetElseLocation = factories[-1].pos[0] + BASE_DISTANCE_X, factories[-1].pos[1] + BASE_DISTANCE_Y
        branch.elsePin.getSink().moveToAndPropagate(targetElseLocation[0], targetElseLocation[1])

    return expansion


def expandBranch(branch: ObjectElement, allElements: List[ObjectElement]) -> List[ObjectElement]:
    if branch.type != ElementType.BRANCH:
        return []
    logicOp = branch.conditionElement
    if logicOp[0].type == ElementType.AND_OPERATOR:
        return expandBranchForAnd(branch, allElements)
    if logicOp[0].type == ElementType.OR_OPERATOR:
        return expandBranchForOr(branch, allElements)
    return []


def transformToShortCircuitFormat(bp_elements: List[ObjectElement]) -> List[ObjectElement]:
    transformed = bp_elements.copy()
    branches = findBranchesAmongElements(transformed)
    while len(branches) > 0:
        branch = branches.pop(-1)
        expansion: List[ObjectElement] = expandBranch(branch, transformed)
        branches.extend(expansion)

    return transformed


bp_elements = importBlueprintElementsFromFile('../SamplesBlueprintCode/SampleBlueprint_1')
transformed_elements = transformToShortCircuitFormat(bp_elements)
transformed_code = exportBlueprintElementsToCode(transformed_elements)
print(transformed_code)
